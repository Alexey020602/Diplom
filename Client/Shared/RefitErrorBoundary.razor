@using System.Net
@using Client.Services.Authorization
@using Refit
@inherits ErrorBoundaryBase
@inject ITokenStorage AuthorizationStorage
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

@ChildContent

@code {
    protected override void OnInitialized()
    {
        ErrorContent = Error;
    }

    private RenderFragment Error(Exception exception) => @<p>Исключение @exception.Message</p>;
    protected override async Task OnErrorAsync(Exception exception)
    {
        Console.WriteLine(exception);
        if (exception is not ApiException apiException) throw exception;
        
        Console.WriteLine(apiException);
        if (apiException. StatusCode != HttpStatusCode.Unauthorized )
        {
            Notify(apiException);
            return;
        }

        Console.WriteLine("Not authorized");
        await AuthorizationStorage.RemoveAuthorization();
        NavigationManager.NavigateTo("login");
    }

    private void Notify(ApiException exception)
    {
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Произошла ошибка",
            Detail = exception.Message + "\n" + exception.Content,
            Duration = 10000,
            
        });
    }

}