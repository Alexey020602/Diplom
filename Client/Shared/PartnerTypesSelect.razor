@using DataBase.Models;
@using Services;

@inject IReadApi<PartnerType> partnerTypesService
<UniversalCustomSelect TItem=@DataBase.Models.PartnerType @bind-SelectedItem:get=@PartnerType @bind-SelectedItem:set=@PartnerTypeChanged GetStringIdentifier=@PartnerTypeStringIdentifier/>
<SelectInList 
    TItem=@DataBase.Models.PartnerType
    Items=@PartnerTypes
    GetStringFromItem=@PartnerTypeStringIdentifier
    @bind-SelectedItem:get=@PartnerType
    @bind-SelectedItem:set=@PartnerTypeChanged
    />

@code {
    private IEnumerable<PartnerType> PartnerTypes { get; set; } = [];
    [Parameter] public PartnerType? PartnerType { get; set; }
    [Parameter] public EventCallback<PartnerType?> PartnerTypeChanged { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadPartnerTypes();
    }
    private async Task LoadPartnerTypes()
    {
        try
        {
            PartnerTypes = await partnerTypesService.ReadAll();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке списка типов партнера {ex}");
        }
    }

    private string PartnerTypeStringIdentifier(PartnerType partnerType) => partnerType.Id.ToString();
}