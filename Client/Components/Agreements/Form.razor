@using Client.Services
@using Client.Shared.Form
@using Model.Agreements
@using Client.Shared.Text
@using Microsoft.AspNetCore.Components.Forms
@using Client.Shared.Select
@using Type = Model.Agreements.AgreementType
@inherits BaseForm<Agreement>
@inject IDivisionsForAgreementService DivisionsService
@inject IPartnersForAgreementService PartnersService

@{
    base.BuildRenderTree(__builder);
}

@code {
    private List<DivisionInAgreement> _divisions = [];
    private List<PartnerInAgreement> _partners = [];

    protected override RenderFragment Content => @<div>
        <InputWithFloatTitle @bind-Value=@Item.Number Title="Номер соглашения"/>
        <ValidationMessage For=@(() => Item.Number)></ValidationMessage>
        
        <UniversalCustomSelect
            @bind-SelectedItem=@Item.Type
            TItem=@Type
            GetStringIdentifier=@(type => type.Id.ToString())/>
        <ValidationMessage For=@(() => Item.Type)></ValidationMessage>
        
        <UniversalCustomSelect
            @bind-SelectedItem=@Item.Status
            TItem=@Status
            GetStringIdentifier=@(status => status.Id.ToString())/>
        <ValidationMessage For=@(() => Item.Status)></ValidationMessage>
        
        <InputDate @bind-Value=@Item.Start>Начало</InputDate>
        <ValidationMessage For=@(() => Item.Start)></ValidationMessage>
        
        <InputDate @bind-Value=@Item.End>Конец</InputDate>
        <ValidationMessage For=@(() => Item.End)></ValidationMessage>
        
        <MultipleSelectWithText NoSelected=@_divisions Selected=@Item.Divisions/>
        <ValidationMessage For=@(() => Item.Divisions)></ValidationMessage>
        
        <MultipleSelectWithText NoSelected=@_partners Selected=@Item.Partners/>
        <ValidationMessage For=@(() => Item.Partners)></ValidationMessage>
    </div>;

    protected override async Task OnParametersSetAsync()
    {
        await Task.WhenAll(
            LoadDivisions(),
            LoadPartners()
            );
        
        await base.OnParametersSetAsync();
    }

    private async Task LoadDivisions()
    {
        //TODO Сделать получение подразделений
        try
        {
            _divisions = await DivisionsService.GetDivisions();
        }
        catch
        {
        }
    }

    private async Task LoadPartners() => _partners = await PartnersService.GetPartners();
}