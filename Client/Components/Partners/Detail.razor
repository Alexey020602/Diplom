@using DataBase.Models
@using Client.Services;
@using Client.Shared.Text;
@using Client.Shared.List;

@page "/partners/{id:int}"

<div>
    <div>
        <NavLink class="oval-button blue-fill" style="display: inline-block" href="partners">
            Назад
        </NavLink>
        <NavLink class="oval-button blue-outline" style="display: inline-block" href=@($"partners/{Id}/edit")>
            Редактировать
        </NavLink>
    </div>

    @if (partner != null)
    {
        <div>
            <h3>@partner.ShortName</h3>
            <h4>@partner.FullName</h4>

            @if (partner.PartnerType != null)
            {
                <TextWithTitle Title="Тип партнера" Text=@partner.PartnerType.ToString() />
            }

            @if (partner.ContactData != null)
            {
                <TextWithTitle Title="Контактные данные" Text=@partner.ContactData />
            }

            @if (partner.Address != null)
            {
                <TextWithTitle Title="Адрес" Text=@partner.Address />
            }

            @if (partner.City != null)
            {
                <TextWithTitle Title="Город" Text=@partner.City />
            }

            @if (partner.Site != null)
            {
                <TextWithTitle Title="Сайт" Text=@partner.Site />
            }
            <ListWithTitle Title="Направления" Items=@partner.Directions/>
        </div>
    }
    else
    {
        <p>Загрузка...</p>
    }

</div>



@code {
    [Inject]
    private IPartnersService PartnersService { get; set; } = default!;
    [Parameter]
    public int Id { get; set; }

    private Partner? partner;

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            Console.WriteLine($"{Id}");
            partner = await PartnersService.ReadOne(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
