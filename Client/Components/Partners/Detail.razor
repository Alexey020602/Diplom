@using Client.Services.Api
@using Microsoft.AspNetCore.Components
@using Client.Shared.List
@using Client.Shared.Text
@using Microsoft.AspNetCore.Authorization
@using Model.Agreements
@using Model.Interactions
@using Model.Partners
@using Partner = Model.Partners.Partner
@attribute [Authorize(Roles = "Cip")]
@inherits Client.Shared.DetailPage<Partner>

@page "/partners/{id:int}"

@{
    base.BuildRenderTree(__builder);
}

@code {
    [Inject] private IPartnersService PartnersService { get; set; } = default!;

    protected override RenderFragment Content(Partner item) => @<RadzenStack>
        <RadzenText TagName="TagName.H3" Text=@item.ShortName/>
        <RadzenText TagName="TagName.H4" Text=@item.FullName/>
        <TextWithTitle Title="Тип партнера" Text="@item.Type?.ToString()"/>
        <TextWithTitle Title="Контактные данные" Text="@item.ContactData"/>
        <TextWithTitle Title="Адрес" Text="@item.Address"/>
        <TextWithTitle Title="Город" Text="@item.City"/>
        <TextWithTitle Title="Сайт" Text="@item.Site"/>
        <ListWithTitle Title="Направления" Items="@item.Directions"/>
        <ListWithTitle Title="Соглашения" Items="@item.Agreements" Row=@AgreementRow/>
        <ListWithTitle Title="Взаимодействия" Items="@item.Interactions"/>
    </RadzenStack>;

    protected override Task Delete() => PartnersService.Delete(Id);
    protected override Task<bool> CanDelete() => PartnersService.CanDelete(Id);

    protected override string EntitiesPath => "partners";
    protected override string? Title => Item?.ShortName;

    protected override Task<Partner> LoadItem()
    {
        return PartnersService.ReadOne(Id);
    }

    private RenderFragment AgreementRow(AgreementInPartner agreementInPartner) => @<NavLink href=@AgreementsPath(agreementInPartner)></NavLink>;

    private string AgreementsPath(AgreementInPartner agreementInPartner) => $"/{NavigationConstants.AgreementsPath}/{agreementInPartner.Id}";
}