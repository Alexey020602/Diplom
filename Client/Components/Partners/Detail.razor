@using Client.Services.Api
@using Client.Shared.List
@using Client.Shared.Text
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Model.Agreements
@using Model.Interactions
@using Model.Partners
@using Partner = Model.Partners.Partner
@attribute [Authorize(Roles = "Cip")]
@inherits Client.Shared.DetailPage<Partner>

@page "/partners/{id:int}"

@{
    base.BuildRenderTree(__builder);
}

@code {
    [Inject] private IPartnersService PartnersService { get; set; } = default!;
    private List<InteractionInPartner> interactions = [];
    private List<AgreementInPartner> agreements = [];
    protected override Task Delete() => PartnersService.Delete(Id);
    protected override bool CanDelete => !(interactions.Any() || agreements.Any());

    protected override IEnumerable<Row> Rows(Partner item) =>
    [
        new("Тип партнера", @item.Type?.ToString()),
        new("Контактные данные", @item.ContactData),
        new("Адрес", @item.Address),
        new("Город", @item.City),
        new("Сайт", @item.Site),
        new("Направления", @<div>
            @foreach (var direction in @item.Directions)
            {
                @direction
            }
        </div>),
        new("Соглашения", @<div>
            @foreach (var agreement in item.Agreements)
            {
                @AgreementRow(agreement)
            }
        </div>),
        new("Взаимодействия", @<div>
            @foreach (var interaction in item.Interactions)
            {
                @InteractionRow(interaction)
            }
        </div>),
    ];

    protected override RenderFragment? Header(Partner item) => @<div>
        <RadzenText TagName="TagName.H3" Text=@item.ShortName/>
        <RadzenText TagName="TagName.H4" Text=@item.FullName/>
    </div>;

    protected override string EntitiesPath => "partners";
    protected override string? Title => Item?.ShortName;

    protected override Task<Partner> LoadItem()
    {
        return PartnersService.ReadOne(Id);
        
    }

    private RenderFragment AgreementRow(AgreementInPartner agreementInPartner) => @<NavLink href=@AgreementsPath(agreementInPartner)>@agreementInPartner</NavLink>;

    private string AgreementsPath(AgreementInPartner agreementInPartner) => $"/{NavigationConstants.AgreementsPath}/{agreementInPartner.Id}";

    private RenderFragment InteractionRow(InteractionInPartner interaction) => @<NavLink href="@InteractionPath(interaction)">@interaction</NavLink>;

    private string InteractionPath(InteractionInPartner interaction) => $"/{NavigationConstants.InteractionsPath}/{interaction.Id}";


}